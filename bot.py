import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
users = {}
message_replies = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_menu(update: Update):
    menu_keyboard = [
        [KeyboardButton("üü© /choose_user")],
    ]
    
    reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text} –æ—Ç {update.effective_user.id}")
    user_id = update.effective_user.id
    username = update.effective_user.username or f"User_{user_id}"

    if user_id not in users:
        users[user_id] = username
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {username} (ID: {user_id})")
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!")
    else:
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (ID: {user_id})")
        await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")

    await show_menu(update)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
async def choose_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not users or len(users) < 2:
        await update.message.reply_text("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    keyboard = [
        [InlineKeyboardButton(username, callback_data=str(target_id))]
        for target_id, username in users.items()
        if target_id != user_id
    ]

    if not keyboard:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞—à–µ–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
async def handle_user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    sender_id = query.from_user.id
    receiver_id = int(query.data)

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[receiver_id]}! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id} –≤—ã–±—Ä–∞–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ {receiver_id}.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sender_id = update.effective_user.id
    message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥—Ä–µ—Å–∞—Ç–∞
    if sender_id not in message_replies:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /choose_user."
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    receiver_id = message_replies[sender_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∞–¥—Ä–µ—Å–∞—Ç—É
    await context.bot.send_message(
        chat_id=receiver_id,
        text=f"–í–∞–º –ø–∏—Å—å–º–æ –æ—Ç –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã: \n{message}\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –µ–º—É, –∏ –±–æ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—à –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ."
    )
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_id}. –¢–µ–∫—Å—Ç: {message}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    message_replies[receiver_id] = sender_id  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —á–∞—Ç–µ
    await update.message.reply_text("–í–∞—à–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sender_id = update.effective_user.id
    message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
    if sender_id not in message_replies:
        await update.message.reply_text("–ù–∏–∫—Ç–æ –Ω–µ –∂–¥–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.")
        return

    receiver_id = message_replies[sender_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    await context.bot.send_message(
        chat_id=receiver_id,
        text=f"–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã: \n{message}"
    )
    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_id}. –¢–µ–∫—Å—Ç: {message}")

    await update.message.reply_text("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application
    application = Application.builder().token("7244231240:AAF058JkWuJPYtjIUySSIT3swUE8Dt_u_bE").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("choose_user", choose_user))
    application.add_handler(CallbackQueryHandler(handle_user_selection))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.REPLY & ~filters.COMMAND, handle_reply))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
